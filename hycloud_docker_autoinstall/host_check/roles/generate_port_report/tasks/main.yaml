- name: "创建report目录"
  file:
    path: "{{ playbook_dir }}/{{ item }}"
    state: directory
  with_items:
    - report
  ignore_errors: true
  run_once: true
  delegate_to: 127.0.0.1

- name: "清空历史文件"
  shell: "rm -f -r {{ playbook_dir }}/report/port.*"
  delegate_to: 127.0.0.1
  ignore_errors: true
  run_once: true



- name: '打印control node IP'
  debug:
    msg: "{{ ansible_env['SSH_CLIENT'].split() | first }}"
  run_once: true
  register: control_node_ip


- file:
    path: "{{ role_path }}/files/generate_port_report.py"
    state: file
    mode: '0777'
  run_once: true
  delegate_to: 127.0.0.1

- file:
    path: "{{ role_path }}/files/generate_hardware_report.py"
    state: file
    mode: '0777'
  run_once: true
  delegate_to: 127.0.0.1


- file:
    path: "{{ role_path }}/files/generate_host_report.py"
    state: file
    mode: '0777'
  run_once: true
  delegate_to: 127.0.0.1



- name: "调用python,生成硬件检测报告"
  run_once: true
  command: "./generate_hardware_report.py {{ playbook_dir }}/tmp/"
  args:
    chdir: "{{ role_path }}/files"
  delegate_to: 127.0.0.1
  ignore_errors: true
  register: create_hardware_report_result


- name: "调用python,生成端口检测报告"
  run_once: true
  command: "./generate_port_report.py {{ playbook_dir }}/tmp/"
  args:
    chdir: "{{ role_path }}/files"
  delegate_to: 127.0.0.1
  ignore_errors: true
  register: create_report_result

- name: "关闭测试端口监听后端"
  ignore_errors: true
  shell: "telnet 127.0.0.1 18888 >/dev/null 2>&1"

- name: "汇总硬件及端口检测报告"
  run_once: true
  command:  "./generate_host_report.py  {{ playbook_dir }}/tmp/"
  args:
    chdir: "{{ role_path }}/files"
  delegate_to: 127.0.0.1
  ignore_errors: true

- fail:
    msg:  "部分主机检测不通过，工具强制退出，查看详细报告，请访问 http://{{ control_node_ip.msg }}:5000/report/hosts_check_result_report.html"
  when: create_report_result.rc != 0   or  create_hardware_report_result.rc != 0
  delegate_to: 127.0.0.1
  run_once: true


- debug:
    msg: "所有主机检测通过，查看详细报告，请访问 http://{{ control_node_ip.msg }}:5000/report/hosts_check_result_report.html"
  delegate_to: 127.0.0.1
  run_once: true
  changed_when: true
    
#- stat:
#    path: "{{ playbook_dir }}/tmp/failed_ssh_host.log"
#  register: p
#  delegate_to: 127.0.0.1
#  run_once: true
#
#- name: "打印无法SSH 连接的主机"
#  debug:
#    msg: "无法SSH连接主机：{{ item }}"
#  with_lines:  "[[ -f {{ playbook_dir }}/tmp/failed_ssh_host.log  ]] && cat {{ playbook_dir }}/tmp/failed_ssh_host.log||echo '无'"
#  run_once: true
#  changed_when: true
#
#- fail:
#    msg: "部分主机无法 SSH 连接,工具无法继续执行"
#  when: p.stat.exists  and not  p.stat.isdir
#  run_once: true
#
#- name: "清空无效文件"
#  local_action: file path=./tmp/groupname_2_hosts.log state=absent
#  ignore_errors: true
#  run_once: true
#
#- name: "创建临时目录"
#  local_action: file path=./tmp state=directory
#
#- name: "遍历当前GROUPS"
#  run_once: true
#  include_tasks: write_to_file.yaml
#  with_dict: "{{ groups }}"
#  loop_control:
#     loop_var: group
#  when:  (group.key  != "ungrouped") and (group.key  != "all")
#
#- file:
#    path: "{{ role_path }}/files/generate_port_check.py"
#    state: file
#    mode: '0777'
#  run_once: true
#  delegate_to: 127.0.0.1
#
#- name: "调用python script"
#  run_once: true
#  command: ./generate_port_check.py
#  args:
#    chdir: "{{ role_path }}/files"
#  delegate_to: 127.0.0.1
#
#- name: "拷贝脚本至目标服务器"
#  copy:
#    src: "{{ item }}"
#    dest: "/tmp"
#  with_items:
#     - check_port.sh
#     - "{{ playbook_dir }}/tmp/host_listening_ports.txt"
#     - "{{ playbook_dir }}/tmp/port_check_list.txt"
#     - start_test_services.py
#
#- name: "修改脚本文件权限"
#  file:
#    path: "/tmp/{{ item }}"
#    state: file
#    mode: '0777'
#  with_items:
#     - check_port.sh
#     - start_test_services.py
#
#- name: '启动端口监听程序'
#  shell: "(cd /tmp/;python2 start_test_services.py {{ ansible_host }} >/dev/null 2>&1 &)"
#  async: 10
#  poll: 0
#  ignore_errors: true 
